#!/usr/bin/env ruby

require 'webrick'
require 'optparse'
require 'ostruct'

LOG_FILE = 'jekyll-rebuilder.log'
DRAFT_CONFIG_FILE = '_drafts_config.yml'
BRANCH = 'master'

options = OpenStruct.new
OptionParser.new do |opts|
  opts.banner = "Usage: jekyll-rebuilder --port PORT --secret SECRET"

  opts.on("-p", "--port [PORT]", Integer, "Port to listen on") do |port|
    options.port = port
  end

  opts.on("-s", "--secret [SECRET]", String, "Path to accept hook request from") do |secret|
    options.secret = secret
  end

  opts.on("-c", "--config [CONFIG]", String, "Config file to use") do |config|
    options.config = config
  end

  options.branch = BRANCH
  opts.on("-b", "--branch [BRANCH]", String, "Github branch to pull from") do |branch|
    options.branch = branch
  end

  options.s3bucket = nil
  opts.on("--s3bucket [S3BUCKET]", String, "S3 bucket to push files") do |s3bucket|
    options.s3bucket = s3bucket
  end
end.parse!

raise "Missing arguments. Consult jekyll-rebuilder --help" unless options.port && options.secret
raise "Current directory missing #{options.config}" if options.config && !File.exists?(options.config)

puts ">> Listening on http://0.0.0.0:#{options.port}/#{options.secret}/ for webhook requests."
puts ">> Will then refresh jekyll site at #{Dir.pwd}"

jekyll_build_args = []

# Append any jekyll arguments
options.config && jekyll_build_args.push("--config #{options.config}")

server = WEBrick::HTTPServer.new :Port => options.port
server.mount_proc "/#{options.secret}/" do |req, res|
  `git fetch origin 2>&1 > #{LOG_FILE}`
  `git reset --hard origin/#{options.branch} >> #{LOG_FILE} 2>&1`
  `git checkout #{options.branch} > #{LOG_FILE} 2>&1`
  `jekyll build #{jekyll_build_args.join(" ")} >> #{LOG_FILE} 2>&1`
  `jekyll build --drafts --config #{DRAFT_CONFIG_FILE} #{jekyll_build_args} >> #{LOG_FILE} 2>&1` if File.exists?(DRAFT_CONFIG_FILE)
  if options.s3bucket
    `s3cmd sync --no-preserve --exclude '*.*' --include  '*.css' --mime-type="text/css" _site/ s3://#{options.s3bucket} >> #{LOG_FILE} 2>&1`
    `s3cmd sync --no-preserve --exclude '*.*' --include  '*.js' --mime-type="application/javascript" _site/ s3://#{options.s3bucket} >> #{LOG_FILE} 2>&1`
    `s3cmd sync --no-preserve --delete-removed _site/ s3://#{options.s3bucket} >> #{LOG_FILE} 2>&1`
  end
  res.body = "jekyll build completed @ #{Time.now}"
  res.body = res.body + ",\n" + "and synced to s3://#{options.s3bucket}." if options.s3bucket

  res.body = res.body + "\n\n============== log ================"
  File.foreach(LOG_FILE) do |line|
        res.body = res.body + "\n" +line
  end
end

trap 'INT' do server.shutdown end
server.start
